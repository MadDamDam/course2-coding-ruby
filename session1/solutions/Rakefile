# ------ Assignment 1 solution ------
require 'open3'

desc 'Checks for cpu load in last 5 minuts and notifies if above threshold'
task :check_load do
  threshold = ENV["THRESHOLD"] || 2.0

  stdout = Open3.capture3("uptime").first

  # It is also possible to use regular expression here (but a bit less readable). See Regexp Ruby class
  short, mid, long = stdout.split("load averages:").last.split(" ")

  puts "Current midterm load is #{mid}"

  if mid.to_f > threshold.to_f
    raise "Error! Cpu load in last 5 minutes is above the threshold of #{threshold}!"
  end
end

# Calling "rake check_load THRESHOLD=2.4" when the actual load is 2.7 will produce:

# Current midterm load is 2.7
# rake aborted!
# Error! Cpu load in last 5 minutes is above the threshold of 2.4!
# /Users/eyals/dev/coding-ruby/Rakefile:68:in `block in <top (required)>'
# Tasks: TOP => check_load
# (See full trace by running task with --trace)

# -----------------------------------



# ------ Assignment 2 solution ------
# I skipped adding description to all tasks to make it shorter
# There are advanced ways we can extract more duplicate code here, but, I kept it simplified.
task pizza_and_potatoes: [:pizza, :potatoes]

task pizza: [:create_dough, :add_tomato_sauce, :add_cheese, :place_pizza_in_oven]

task potatoes: [:peel_potatoes, :put_spices, :place_potatoes_in_oven]

task :market do
  puts "Go to the market"
end

task :turn_oven_on do
  puts "Turn oven on"
end

task create_dough: [:market] do
  puts "Creating dough"
end

task :add_tomato_sauce do
  puts "putting tomato sauce"
end

task :add_cheese do
  puts "Adding cheese"
end

task place_pizza_in_oven: [:turn_oven_on] do
  puts "Pizza placed in oven"
end

task peel_potatoes: [:turn_oven_on] do
  puts "Peel potatoes"
end

task :put_spices do
  puts "put spices"
end

task place_potatoes_in_oven: [:turn_oven_on] do
  puts "Potatoes placed in oven"
end


# calling "rake pizza_and_potatoes" will produce the following output:

# Go to the market
# Creating dough
# putting tomato sauce
# Adding cheese
# Turn oven on
# Pizza placed in oven
# Peel potatoes
# put spices
# Potatoes placed in oven


# -----------------------------------



# ------ Assignment 3 solution ------
namespace :files do
 desc 'rename received file suffix from yaml to yml'
 task :rename_yaml, [:file, :path] do |t, args|
   raise "No file name received"                      unless args.file
   raise "File #{args.file} is not of yaml type"      unless File.extname(args.file) == ".yaml"
   path_expd = args.path ? "#{File.expand_path(args.path)}/" : ""
   raise "File #{path_expd}#{args.file} is not valid" unless File.file?("#{path_expd}#{args.file}")
   file_base = File.basename(args.file,".yaml")
   raise "File #{file_base}.yml already exists"       if File.exist?("#{path_expd}#{file_base}.yml")
   File.rename("#{path_expd}#{args.file}","#{path_expd}#{file_base}.yml")
   puts "File #{path_expd}#{args.file} renamed to #{path_expd}#{file_base}.yml"
 end
end


# -----------------------------------



# ------ Assignment 4 solution ------

require 'rubygems/package'

desc "Archive specified path to tar.gz"
task :archive  do |t,args|

  NEW_ARCHIVE_PATH = "build/"
  NEW_ARCHIVE_SUFF = ".tar.gz"

  path = ENV["ARCPATH"] ? "#{File.expand_path(ENV["ARCPATH"])}/" : Dir.pwd
  raise "path #{path} does not exist" unless Dir.exist?(path)

  exclude_suff = ENV["EXCLUDE"].split(",") if ENV["EXCLUDE"]

  files_to_arc = Rake::FileList.new("#{path}*")

  # Not supporting taring directories at this version
  files_to_arc.exclude() { |file_name| exclude_suff.include?(File.extname(file_name)) || Dir.exist?(file_name) } if exclude_suff

  begin
    Dir.mkdir("#{path}#{NEW_ARCHIVE_PATH}") unless File.exist?("#{path}#{NEW_ARCHIVE_PATH}")
  rescue Exception=>e
    puts "Error creating sub directory build: #{e}"
  else
    arc_file_name = path + NEW_ARCHIVE_PATH + File.basename(path).gsub(/[^a-z,A-Z]/, '_') + NEW_ARCHIVE_SUFF
    begin
      arc_file = File.open(arc_file_name,"w")
    rescue Exception=>e
      puts "Error opening archive file: #{e}"
    else
      begin
        puts "Writing archive #{arc_file_name}:"
        Zlib::GzipWriter.wrap(arc_file) do |gz_file|
          Gem::Package::TarWriter.new(gz_file) do |tar|
            files_to_arc.each do |file_name|
              begin
                in_file = File.open(file_name,"r")
              rescue Exception=>e
                puts "Error opening input file #{file_name} : #{e}"
              else
                begin
                  print "   Adding #{file_name} to archive... "
                  tar.add_file_simple(file_name,File.stat(file_name).mode,File.stat(file_name).size) {|io| io.write(File.read(file_name))}
                  puts "Complete!"
                rescue Exception=>e
                  puts "Error writing #{file_name} to #{arc_file_name} : #{e}"
                ensure
                  in_file.close()
                end
              end
            end
          end
        end
        puts "Finished writing archive #{arc_file_name}."
      rescue Exception=>e
        puts "Error writing archive: #{e}"
      ensure
        arc_file.close()
      end
    end
  end
end
